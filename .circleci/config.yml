version: '2.1'
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  aws-cli: circleci/aws-cli@1.0.0
jobs:
  build-docker:
    environment:
      IMAGE_NAME: nghiahv1/project5
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            pwd
            ls
            # echo ver- >> .version 
            echo ver-${CIRCLE_WORKFLOW_ID:0:7} >> .version 
            cat .version
            # echo "date-" + $TIME > .version 
            docker build -t $IMAGE_NAME:$(cat /home/circleci/project/.version) .
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
            docker push $IMAGE_NAME:$(cat /home/circleci/project/.version)  
 
  build-check:
    docker:
      - image: 'python:3.7.3-stretch'
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - 'v1-dependencies-{{ checksum "requirements.txt" }}'
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: 'v1-dependencies-{{ checksum "requirements.txt" }}'
      - run:
          name: run lint
          command: |
            pwd
            ls
            . venv/bin/activate
            make lint
  create-eks-cluster:
    docker:
      - image: cimg/python:3.10
    steps:
        - kubernetes/install:
            kubectl-version: v1.22.0
        # - aws-eks/create-cluster:
        #     cluster-name: nghia-deployment
        #     node-type: t3.micro
        #     nodes: 2
        # - aws-eks/create-load-balancer:
        #   cluster-name: nghia-deployment
        #   service-name: my-service
        #   port: 80
        #   target-port: 80
            #  with-loadcer: true
        - run:
            ignore-failure: true
            command: |
                curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                sudo mv /tmp/eksctl /usr/local/bin
                #  echo ${CIRCLE_WORKFLOW_ID:0:7} >> .version 
                curl --silent --location https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip > awscli.zip
                unzip awscli.zip
                sudo ./aws/install
                aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE >> .clound
                pwd
                if grep -q "eksctl-nghia-deployment-cluster" .clound
                then
                  echo "ignore create cluster"
                else  
                  echo "create cluster"
                  eksctl create cluster --name nghia-deployment --region us-east-1 --node-type t3.small --nodes 2
                fi
                # eksctl create cluster --name nghia-deployment --skip-if-exists --region us-east-1 --node-type t3.small --nodes 2
                # aws create cluster --name nghia-deployment --skip-if-exists --region us-east-1 --node-type t3.small --nodes 2
            name: Test cluster
  test-cluster:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install:
          kubectl-version: v1.22.0
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster
  create-deployment:
    docker:
        - image: cimg/python:3.10
    working_directory: ~/repo
    parameters:
        cluster-name:
            description: |
              Name of the EKS cluster
            type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      # - aws-eks/create-service:
      #     cluster-name: nghia-deployment
      #     service-name: my-service
      #     port: 80
      #     target-port: 8000
      # - kubernetes/create-or-update-resource:
      #     resource-file-path: ~/repo/deployment.yaml
      #     get-rollout-status: true
      #     resource-name: deployment.apps/nghiahv-deployment
      #     # command: rollout undo
      #     # revision: <revision-number>
      # - kubernetes/create-or-update-resource:
      #     resource-file-path: ~/repo/deployment.yaml
      - run:
          command: |
            # export TAGIMAGE=${CIRCLE_WORKFLOW_ID:0:7}
            # echo ${TAGIMAGE}
            # # echo $TAGIMAGE
            # sed -i  "s/TAGIMAGE/$TAGIMAGE/g" ~/repo/deployment.yaml
            # # cat ~/repo/deployment.yaml
            # # kubectl exec deployment.apps/nghiahv-deployment -- printenv
            # kubectl apply -f ~/repo/deployment.yaml
            # # kubectl rollout restart
            # kubectl get deployment
            # # kubectl rollout status deployment.apps/nghiahv-deployment
            
            # # # kubectl create service my-service --type=LoadBalancer --port=80 --selector app=my-deployment
            # # kubectl get deployment

            # kubectl get services >> .services
            # if grep -q "nghiahv-deployment" .services
            # then
            #   echo "ignore create services"
            # else  
            #   echo "create services"
            #   kubectl expose deployment nghiahv-deployment --type=LoadBalancer --port=80
            # fi
            kubectl delete service nghiahv-deployment
            # kubectl rollout status deploy deployment.apps/nghiahv-deployment
            # kubectl get services
          name: deploy EKS 
workflows:
  deployment:
    jobs:
      # - build-docker
      # - build-check:
      #     requires:
      #         - build-docker
      # # - build-check
      # - create-eks-cluster:
      #     requires:
      #       - build-check
      # - test-cluster:
      #     cluster-name: nghia-deployment
      #     requires:
      #       - create-eks-cluster
      - create-deployment:
          cluster-name: nghia-deployment
          requires:
            - test-cluster
      - aws-eks/delete-cluster:
          cluster-name: nghia-deployment
      #     requires:
      #       - create-deployment
